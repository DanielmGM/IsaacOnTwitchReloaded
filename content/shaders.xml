<shaders>
  <!------------------------------------------ Blink shader ------------------------------------------>
  <shader name="IOTR_Blink">
    <parameters>
      <param name="Time" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[
      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0;
      uniform mat4 Transform;
      
      attribute float Time;
      
      varying float TimeOut;
      varying float ScaleOut;
      varying vec3 PositionOut;
      varying vec4 RenderDataOut;
      
      void main(void) {
        RenderDataOut = RenderData;
        PositionOut = Position;  
        ScaleOut = Scale;        
        ScaleOut = Scale;
        TimeOut = Time;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      uniform sampler2D Texture0;
      
      varying lowp vec4 RenderDataOut;
      varying lowp float TimeOut;
      varying lowp float ScaleOut;
      varying lowp vec3 PositionOut;
      
      void main(void) {
        if (TimeOut > 0.0) {
          vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
          
          float screenPosX = PositionOut.x/RenderDataOut.x * ScaleOut;
          float screenPosY = PositionOut.y/RenderDataOut.y * ScaleOut;
          
          Color.rgb = Color.rgb - (smoothstep(0.1,0.9, screenPosY - (1-TimeOut*1.1)));
          Color.rgb = Color.rgb - (smoothstep(0.1,0.9, TimeOut*1.1 - screenPosY));
          
          gl_FragColor = Color;
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Screen mirror shader ------------------------------------------>
  <shader name="IOTR_ScreenMirror">
    <parameters>
      <param name="Pos" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Pos;
      
      void main(void) {
        Color0 = Color; 
        
        if (Pos > 0.0) {
          if (Pos == 1.0) {
            TexCoord0 = vec2(RenderData.w/RenderData.z - TexCoord.x, TexCoord.y);
          }
          else if (Pos == 2.0) {
            TexCoord0 = vec2(TexCoord.x, RenderData.y/RenderData.x - TexCoord.y);
          }
          else {
            TexCoord0 = vec2(RenderData.w/RenderData.z - TexCoord.x, RenderData.y/RenderData.x - TexCoord.y);
          }
        }
        else {
          TexCoord0 = TexCoord;
        }
        
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
      
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      void main(void) {
        gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ VHS shader ------------------------------------------>
  <shader name="IOTR_VHS">
    <parameters>
      <param name="Time" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Time;
      varying float TimeOut;
      
      void main(void) {
        RenderDataOut = RenderData; 
        ScaleOut = Scale;
        TimeOut = Time;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      varying lowp float TimeOut;
      
      float rand(vec2 co){
				return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);
			}
      
      void main(void) {
        if (TimeOut > 0.0) {
          vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
          
          float VHSPosWidth = rand(TexCoord0)/26;
					if (TexCoord0.y > TimeOut && TexCoord0.y < TimeOut + VHSPosWidth) {
						
						float c = rand(vec2(TexCoord0.y, TexCoord0.y))+1;
						Color.r *= rand(vec2(TexCoord0.y+TimeOut/2, TexCoord0.y-100))*2*c;
						Color.g *= rand(vec2(TexCoord0.y+20, TexCoord0.y-TimeOut*3))*2*c;
						Color.b *= rand(vec2(TexCoord0.y-TimeOut/4, TexCoord0.y-543))*2*c;
					}
          gl_FragColor = Color;
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ ColorSides shader ------------------------------------------>
  <shader name="IOTR_ColorSides">
    <parameters>
      <param name="Intensity" type="float"/>
      <param name="VColor" type="vec3"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Intensity;
      varying float IntensityOut;
      
      attribute vec3 VColor;
      varying vec3 VColorOut;
      
      varying vec3 PositionOut;
      
      void main(void) {
        RenderDataOut = RenderData;
        PositionOut = Position;
        ScaleOut = Scale;
        IntensityOut = Intensity;
        VColorOut = VColor;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      varying lowp float IntensityOut;
      varying lowp vec3 VColorOut;
      varying lowp vec3 PositionOut;
      
      void main(void) {
        if (IntensityOut > 0.0) {
          vec4 color = Color0 * texture2D(Texture0, TexCoord0);
          
          float screenPosX = PositionOut.x/RenderDataOut.x * ScaleOut;
          float screenPosY = PositionOut.y/RenderDataOut.y * ScaleOut;
          float mIntensity = IntensityOut / 1.7;
          
          color.rgb = color.rgb + (smoothstep(0.1,0.9, screenPosX - (1-mIntensity)) * VColorOut.rgb);
          color.rgb = color.rgb + (smoothstep(0.1,0.9, mIntensity - screenPosX) * VColorOut.rgb);
          color.rgb = color.rgb + (smoothstep(0.1,0.9, screenPosY - (1-mIntensity)) * VColorOut.rgb);
          color.rgb = color.rgb + (smoothstep(0.1,0.9, mIntensity - screenPosY) * VColorOut.rgb);
          gl_FragColor = color;
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Glitch shader ------------------------------------------>
  <shader name="IOTR_Glitch">
    <parameters>
      <param name="Time" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Time;
      varying float TimeOut;
      
      void main(void) {
        RenderDataOut = RenderData; 
        ScaleOut = Scale;
        TimeOut = Time;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      varying lowp float TimeOut;
      
      float rand(vec2 co) {
				return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
			}
      
      void main(void) {
        if (TimeOut >= 0.0) {
          vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
          float temp = rand(vec2(TexCoord0.x + TimeOut, TexCoord0.y + TimeOut));
					
					if (rand(vec2(TexCoord0.x + TimeOut*2, TexCoord0.y + TimeOut*2)) > 0.8) {
						
						if (temp > 0.2 && temp < 0.4) {
							Color.r += rand(vec2(TexCoord0.x/5, TexCoord0.y/5.0));
						}
						
						if (temp > 0.4 && temp < 0.6) {
							Color.g += rand(vec2(TexCoord0.x/5, TexCoord0.y/5.0));
						}
						
						if (temp > 0.6 && temp < 0.8) {
							Color.b += rand(vec2(TexCoord0.x/5, TexCoord0.y/5.0));
						}
					}
          
          gl_FragColor = Color;
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Deep Dark shader ------------------------------------------>
  <shader name="IOTR_DeepDark">
    <parameters>
      <param name="Intensity" type="float"/>
      <param name="PlayerPos" type="vec2"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Intensity;
      varying float IntensityOut;
      
      attribute vec2 PlayerPos;
      varying vec2 PlayerPosOut;
      varying vec3 PositionOut;
      
      void main(void) {
        RenderDataOut = RenderData; 
        ScaleOut = Scale;
        IntensityOut = Intensity;
        PlayerPosOut = PlayerPos;
        PositionOut = Position;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        gl_Position = Transform * vec4(Position.xyz, 1.0); 
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      varying lowp float IntensityOut;
      varying lowp vec2 PlayerPosOut;
      varying lowp vec3 PositionOut;
      
      void main(void) {
        if (IntensityOut > 0) {
          vec4 Color = Color0 * texture2D(Texture0, TexCoord0);
          
          Color.rgb -= (sqrt((PlayerPosOut.x-PositionOut.x)*(PlayerPosOut.x-PositionOut.x) +
          (PlayerPosOut.y-PositionOut.y)*(PlayerPosOut.y-PositionOut.y))/((RenderDataOut.x * RenderDataOut.y)/4000.0))*IntensityOut;
          
          gl_FragColor = Color;
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Broken Lens shader ------------------------------------------>
  <shader name="IOTR_BrokenLens">
    <parameters>
      
      <param name="CameraPos" type="vec2"/>
			<param name="Intensity" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      
      attribute float Intensity;
      attribute vec2 CameraPos;
      
      void main(void) {
      RenderDataOut = RenderData; 
      ScaleOut = Scale;
      Color0 = Color; 
      TexCoord0 = TexCoord;
      float mIntensity = Intensity;
      vec3 mPosition = Position;
      
      if (mIntensity >= 0.000001) {
        mIntensity = abs(mIntensity-2.5);
        mPosition.xy += (mPosition.xy - CameraPos.xy)*(mIntensity);
        gl_Position = Transform * vec4(mPosition.xyz, 1.0);
        
      }
      else {
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }
        
    }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      uniform sampler2D Texture0;
      
      void main(void) {
        gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Swirl shader ------------------------------------------>
  <shader name="IOTR_Swirl">
    <parameters>
      <param name="Angle" type="float"/>
      <param name="Radius" type="float"/>
      <param name="SwirlPos" type="vec2"/>
    </parameters>
    <vertex>
    <![CDATA[

      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      varying vec3 PositionOut; 
      uniform mat4 Transform;
      
      attribute float Angle;
      varying float AngleOut;
      
      attribute float Radius;
      varying float RadiusOut;
      
      attribute vec2 SwirlPos;
      varying vec2 SwirlPosOut;
      
      void main(void) {
        RenderDataOut = RenderData; 
        ScaleOut = Scale;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        AngleOut = Angle;
        RadiusOut = Radius;
        PositionOut = Position;
        SwirlPosOut = SwirlPos;
        
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      varying lowp float AngleOut;
      varying lowp float RadiusOut;
      varying lowp vec2 SwirlPosOut;
      varying lowp vec3 PositionOut;
      uniform sampler2D Texture0;
      
      void main(void) {
        
        float ratioX = RenderDataOut.x / RenderDataOut.z;
        float ratioY = RenderDataOut.y / RenderDataOut.w;
        
        if (AngleOut > 0.0) {
          lowp vec2 textureCoordinateToUse = TexCoord0;
          lowp vec2 center = SwirlPosOut*2.0/RenderDataOut.zw;
          lowp float dist = distance(center, TexCoord0);
          textureCoordinateToUse -= center;
            
            
          if (dist < RadiusOut)
          {
            lowp float percent = (RadiusOut - dist) / RadiusOut;
            lowp float theta = percent * percent * AngleOut * 8.0;
            lowp float s = sin(theta);
            lowp float c = cos(theta);
            textureCoordinateToUse = vec2(dot(textureCoordinateToUse, vec2(c, -s)), dot(textureCoordinateToUse, vec2(s, c)));
          }
          textureCoordinateToUse += center;
            
          gl_FragColor = Color0 * texture2D(Texture0, textureCoordinateToUse);
        }
        else {
          gl_FragColor = Color0 * texture2D(Texture0, TexCoord0);
        }
      }
    ]]>
    </fragment>
  </shader>

  <!------------------------------------------ Bloody shader ------------------------------------------>
  <shader name="IOTR_Bloody">
    <parameters>
      <param name="Intensity" type="float"/>
    </parameters>
    <vertex>
    <![CDATA[
      attribute vec3 Position;
      attribute vec4 Color;
      attribute vec2 TexCoord;
      attribute vec4 RenderData; 
      attribute float Scale;
      
      varying vec4 Color0; 
      varying vec2 TexCoord0; 
      varying vec4 RenderDataOut; 
      varying float ScaleOut;
      uniform mat4 Transform;
      
      attribute float Intensity;
      varying float IntensityOut;
      
      void main(void) {
        RenderDataOut = RenderData; 
        ScaleOut = Scale;
        Color0 = Color; 
        TexCoord0 = TexCoord;
        IntensityOut = Intensity;
        
        gl_Position = Transform * vec4(Position.xyz, 1.0);
      }
    ]]>
    </vertex>
    <fragment>
    <![CDATA[
      varying lowp vec4 Color0; 
      varying mediump vec2 TexCoord0; 
      varying lowp vec4 RenderDataOut;
      varying lowp float ScaleOut;
      varying lowp float IntensityOut;
      uniform sampler2D Texture0;
        
      void main(void) {
		
		vec4 mColor0 = Color0;
      
        vec2 position = ( gl_FragCoord.xy / RenderDataOut.zw );
        vec4 color = texture2D(Texture0, position);
        
        if (IntensityOut > 0.0) {
          if (color.r > color.g*2.1 && color.r > color.b*2.1) {
            mColor0.r = 2.1;
          }
          else {
            color.rgb = (color.r + color.g + color.b)/3.0*IntensityOut + color.rgb * (1.0-IntensityOut);
          }
        }
        
        gl_FragColor = mColor0 * color;
      }
    ]]>
    </fragment>
  </shader>
  
  <!------------------------------------------ Rainbow shader ------------------------------------------>
  <shader name="IOTR_Rainbow">
        <parameters>
            <param name="Time" type="float"/>
        </parameters>
        <vertex>
        <![CDATA[
            attribute vec3 Position;                                        
            attribute vec4 Color;                                           
            attribute vec2 TexCoord;                                        
            attribute vec4 RenderData;                                                                  
            attribute float Scale;
            attribute float Time;
            varying vec4 Color0;                                            
            varying vec2 TexCoord0;
            uniform mat4 Transform;
            
            varying vec3 PositionOut;
            varying vec4 RenderDataOut;
            varying float ScaleOut;
            varying float TimeOut;
            
            void main(void)                                             
            {                                                               
                RenderDataOut = RenderData;
                PositionOut = Position;
                ScaleOut = Scale;
                TimeOut = Time;
                Color0 = Color;                                             
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);          
            }
        ]]>
        </vertex>
        <fragment>
        <![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            uniform sampler2D Texture0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float TimeOut;
            varying lowp vec3 PositionOut;
            void main(void)
            {
              vec4 tintColor = Color0 * texture2D(Texture0, TexCoord0);
              vec4 color = Color0 * texture2D(Texture0, TexCoord0);
              
              float screenPosX = PositionOut.x/RenderDataOut.x * ScaleOut;
              float screenPosY = PositionOut.y/RenderDataOut.y * ScaleOut;
              
              if (TimeOut > 0) {
                tintColor.r *= sin(TimeOut * 0.0432f)*2;
                tintColor.g *= sin(TimeOut * 0.0376f)*2;
                tintColor.b *= sin(TimeOut * 0.0231f)*2;
              }
              
              color.rgb = color.rgb + (smoothstep(0.1,0.9, screenPosX - .7) * tintColor.rgb);
              color.rgb = color.rgb + (smoothstep(0.1,0.9, .3 - screenPosX) * tintColor.rgb);
              color.rgb = color.rgb + (smoothstep(0.1,0.9, screenPosY - .7) * tintColor.rgb);
              color.rgb = color.rgb + (smoothstep(0.1,0.9, .3 - screenPosY) * tintColor.rgb);
              
              gl_FragColor = color;
            }
        ]]>
      </fragment>
    </shader>
    
    
      <!------------------------------------------ One color shader ------------------------------------------>
  <shader name="IOTR_OneColor">
        <parameters>
          <param name="Intensity" type="float"/>
          <param name="EnabledColor" type="float"/>
        </parameters>
        <vertex>
        <![CDATA[
            attribute vec3 Position;                                        
            attribute vec4 Color;                                           
            attribute vec2 TexCoord;                                        
            attribute vec4 RenderData;                                                                  
            attribute float Scale;
            varying float ScaleOut;
            varying vec4 Color0;                                            
            varying vec2 TexCoord0;
            uniform mat4 Transform;
            varying vec3 PositionOut;
            varying vec4 RenderDataOut;
            
            attribute float EnabledColor;
            attribute float Intensity;
            varying float EnabledColorOut;
            varying float IntensityOut;
            
            void main(void)                                             
            {                                                               
                RenderDataOut = RenderData;
                PositionOut = Position;
                ScaleOut = Scale;
                Color0 = Color;                                             
                TexCoord0 = TexCoord;
                gl_Position = Transform * vec4(Position.xyz, 1.0);   
                
                EnabledColorOut = EnabledColor;
                IntensityOut = Intensity;
            }
        ]]>
        </vertex>
        <fragment>
        <![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            uniform sampler2D Texture0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp vec3 PositionOut;
            
            varying lowp float EnabledColorOut;
            varying lowp float IntensityOut;
            void main(void)
            {
              vec4 color = Color0 * texture2D(Texture0, TexCoord0);
              
              if (EnabledColorOut >= .1 && color.r > .8 && color.g > .8 && color.b > .8) {
                
                
                
              }
              else if (EnabledColorOut >= 1 && EnabledColorOut < 2) {
                color.g = color.r - IntensityOut;
                color.b = color.g - IntensityOut;
                color.r *= 4;
              }
              else if (EnabledColorOut >= 2 && EnabledColorOut < 3) {
                color.r = color.r - IntensityOut;
                color.b = color.g - IntensityOut;
                color.g *= 4;
              }
              else if (EnabledColorOut >= 3 && EnabledColorOut < 4) {
                color.r = color.r - IntensityOut;
                color.g = color.g - IntensityOut;
                color.b *= 4;
              }
              
              gl_FragColor = color;
            }
        ]]>
      </fragment>
    </shader>

</shaders>